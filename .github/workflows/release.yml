name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Plume ${{ github.ref }}
        body: |
          ## What's Changed
          - Automatic release for ${{ github.ref }}
          
          ## Download
          Choose the appropriate version for your operating system below.
          
          ## Checksums
          The checksums will be available shortly after the release is published.
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  # Build and upload release assets
  build-release:
    name: Build Release
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: plume
            asset_name: plume-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: plume.exe
            asset_name: plume-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: plume
            asset_name: plume-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin  
            artifact_name: plume
            asset_name: plume-macos-aarch64
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
        
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev \
          build-essential \
          curl \
          wget \
          file \
          libssl-dev \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libasound2-dev
          
    - name: Install dependencies
      run: pnpm install
      
    - name: Build Tauri app
      run: pnpm tauri build --target ${{ matrix.target }}
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        
    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd src-tauri/target/${{ matrix.target }}/release
        tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd src-tauri/target/${{ matrix.target }}/release
        Compress-Archive -Path ${{ matrix.artifact_name }} -DestinationPath ${{ matrix.asset_name }}.zip
        
    - name: Upload Release Asset (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: src-tauri/target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz
        asset_name: ${{ matrix.asset_name }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: src-tauri/target/${{ matrix.target }}/release/${{ matrix.asset_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip

  # Upload installers and bundles
  upload-bundles:
    name: Upload Bundles
    needs: [create-release, build-release]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev \
          build-essential \
          curl \
          wget \
          file \
          libssl-dev \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libasound2-dev
          
    - name: Install dependencies
      run: pnpm install
      
    - name: Build Tauri app with bundles
      run: pnpm tauri build
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        
    - name: Upload Linux bundles
      if: matrix.os == 'ubuntu-latest'
      run: |
        for file in src-tauri/target/release/bundle/deb/*.deb; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/vnd.debian.binary-package" \
              --data-binary @"$file" \
              "${{ needs.create-release.outputs.upload_url }}?name=$filename"
          fi
        done
        
        for file in src-tauri/target/release/bundle/appimage/*.AppImage; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ needs.create-release.outputs.upload_url }}?name=$filename"
          fi
        done
        
    - name: Upload Windows bundles
      if: matrix.os == 'windows-latest'
      run: |
        Get-ChildItem -Path "src-tauri/target/release/bundle/msi/*.msi" | ForEach-Object {
          $filename = $_.Name
          $headers = @{
            "Authorization" = "token ${{ secrets.GITHUB_TOKEN }}"
            "Content-Type" = "application/x-msi"
          }
          Invoke-RestMethod -Uri "${{ needs.create-release.outputs.upload_url }}?name=$filename" -Method POST -Headers $headers -InFile $_.FullName
        }
        
    - name: Upload macOS bundles
      if: matrix.os == 'macos-latest'
      run: |
        for file in src-tauri/target/release/bundle/dmg/*.dmg; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/x-apple-diskimage" \
              --data-binary @"$file" \
              "${{ needs.create-release.outputs.upload_url }}?name=$filename"
          fi
        done